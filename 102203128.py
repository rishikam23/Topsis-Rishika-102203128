# -*- coding: utf-8 -*-
"""102203128.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17luikDNIRmEBpNg8P_SoMKhJNSb6aBDE
"""

import os
import sys
import pandas as pd
import numpy as np

def calc_topsis(inp_file,w,i,out_file):
    if not os.path.exists(inp_file):
        raise FileNotFoundError(f"The file does not exist.")

    df=pd.read_csv(inp_file)
    if df.shape[1]<3:
        raise ValueError("Input file must have at least three columns.")

    w_list=[float(weight) for weight in w.split(',')]
    i_list=i.split(',')
    if len(w_list)!=len(i_list) or len(w_list)!=df.shape[1]-1:
        raise ValueError("The number of weights and impacts must match the number of criteria.")
    if not all(impact in ['+','-'] for impact in i_list):
        raise ValueError("Impacts must be either '+' or '-'.")

    try:
        df_dec=df.iloc[:,1:].astype(float)
    except ValueError:
        raise ValueError("All values from the second column onward must be numeric.")

    norm_data=df_dec/np.sqrt((df_dec**2).sum(axis=0))
    wtd_mat=norm_data*w_list

    ideal_best=[max(wtd_mat.iloc[:,i]) if i_list[i]=='+' else min(wtd_mat.iloc[:,i]) for i in range(len(w_list))]
    ideal_worst=[min(wtd_mat.iloc[:,i]) if i_list[i]=='+' else max(wtd_mat.iloc[:,i]) for i in range(len(w_list))]

    best_dist=np.sqrt(((wtd_mat-ideal_best)**2).sum(axis=1))
    worst_dist=np.sqrt(((wtd_mat-ideal_worst)**2).sum(axis=1))

    perf_score=worst_dist/(best_dist+worst_dist)

    df['Topsis Score']=perf_score
    df['Rank']=perf_score.rank(ascending=False,method='dense').astype(int)

    df.to_csv(out_file,index=False)

def topsis():
    if len(sys.argv)!=5:
        print("Usage: <program.py> <InputDataFile> <Weights> <Impacts> <OutputFileName>")
        sys.exit(1)

    inp_file=sys.argv[1]
    w=sys.argv[2]
    i=sys.argv[3]
    out_file=sys.argv[4]

    try:
        calc_topsis(inp_file,w,i,out_file)
        print(f"Result file saved as '{out_file}'.")
    except Exception as err:
        print(f"An error occurred: {err}")
        sys.exit(1)

if __name__ == "__main__":
    topsis()